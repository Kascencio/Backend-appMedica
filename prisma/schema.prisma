generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  passwordHash         String
  role                 Role
  createdAt            DateTime           @default(now())
  name                 String?
  caregiverProfile     CaregiverProfile?
  notifications        Notification[]
  patientProfile       PatientProfile?
  caregiverPermissions Permission[]       @relation("CaregiverPermissions")
  pushSubscriptions    PushSubscription[]
}

model PatientProfile {
  id                       String               @id @default(cuid())
  userId                   String               @unique
  weight                   Float?
  height                   Float?
  allergies                String?
  reactions                String?
  doctorName               String?
  doctorContact            String?
  photoUrl                 String?
  birthDate                DateTime?
  bloodType                String?
  chronicDiseases          String?
  currentConditions        String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  gender                   String?
  hospitalReference        String?
  appointments             Appointment[]
  intakeEvents             IntakeEvent[]
  inviteCodes              InviteCode[]
  medications              Medication[]
  medicationSchedules      MedicationSchedule[]
  user                     User                 @relation(fields: [userId], references: [id])
  permissions              Permission[]         @relation("PatientPermissions")
  treatments               Treatment[]
  treatmentReminders       TreatmentReminder[]
}

model Permission {
  id               String           @id @default(cuid())
  patientProfileId String
  caregiverId      String
  level            PermissionLevel  @default(READ)
  status           PermissionStatus @default(PENDING)
  caregiver        User             @relation("CaregiverPermissions", fields: [caregiverId], references: [id])
  patientProfile   PatientProfile   @relation("PatientPermissions", fields: [patientProfileId], references: [id])

  @@unique([patientProfileId, caregiverId])
  @@index([caregiverId], map: "Permission_caregiverId_fkey")
}

model InviteCode {
  id               String         @id @default(cuid())
  patientProfileId String
  code             String         @unique
  expiresAt        DateTime
  used             Boolean        @default(false)
  createdAt        DateTime       @default(now())
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])

  @@index([patientProfileId], map: "InviteCode_patientProfileId_fkey")
}

model Medication {
  id               String               @id @default(cuid())
  patientProfileId String
  name             String
  
  dosage           String?
  type             String?
  frequency        String
  startDate        DateTime
  endDate          DateTime?
  notes            String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  patientProfile   PatientProfile       @relation(fields: [patientProfileId], references: [id])
  schedules        MedicationSchedule[]

  @@index([patientProfileId])
}

model MedicationSchedule {
  id               String         @id @default(cuid())
  patientProfileId String
  medicationId     String
  frequency        String
  times            Json
  daysOfWeek       Json?
  customRule       Json?
  timezone         String
  medication       Medication     @relation(fields: [medicationId], references: [id])
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])

  @@index([medicationId])
  @@index([patientProfileId], map: "MedicationSchedule_patientProfileId_fkey")
}

model Treatment {
  id               String                    @id @default(cuid())
  patientProfileId String
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime?
  progress         String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  patientProfile   PatientProfile            @relation(fields: [patientProfileId], references: [id])
  reminders        TreatmentReminder[]
  medications      TreatmentMedication[]

  @@index([patientProfileId], map: "Treatment_patientProfileId_fkey")
}

model TreatmentMedication {
  id          String    @id @default(cuid())
  treatmentId String
  name        String
  dosage      String?
  type        String?
  frequency   String?
  notes       String?
  treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@index([treatmentId])
}

model TreatmentReminder {
  id               String         @id @default(cuid())
  patientProfileId String
  treatmentId      String
  frequency        String
  times            Json
  daysOfWeek       Json?
  timezone         String
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])
  treatment        Treatment      @relation(fields: [treatmentId], references: [id])

  @@index([patientProfileId], map: "TreatmentReminder_patientProfileId_fkey")
  @@index([treatmentId], map: "TreatmentReminder_treatmentId_fkey")
}

model Appointment {
  id               String            @id @default(cuid())
  patientProfileId String
  title            String
  description      String?
  dateTime         DateTime
  location         String?
  specialty        String?        
  status           AppointmentStatus @default(SCHEDULED)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  patientProfile   PatientProfile    @relation(fields: [patientProfileId], references: [id])

  @@index([patientProfileId, dateTime])
}

model IntakeEvent {
  id               String         @id @default(cuid())
  kind             IntakeKind
  refId            String
  patientProfileId String
  scheduledFor     DateTime
  action           IntakeAction
  at               DateTime       @default(now())
  meta             Json?
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])

  @@index([patientProfileId, scheduledFor])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "PushSubscription_userId_fkey")
}

model CaregiverProfile {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  phone                    String?
  relationship             String?
  photoUrl                 String?
  birthDate                DateTime?
  bloodType                String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  gender                   String?
  user                     User      @relation(fields: [userId], references: [id])
}

model Notification {
  id           String               @id @default(cuid())
  userId       String
  type         NotificationType
  title        String
  message      String
  priority     NotificationPriority @default(MEDIUM)
  status       NotificationStatus   @default(UNREAD)
  metadata     Json?
  scheduledFor DateTime?
  readAt       DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  user         User                 @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([userId, type])
  @@index([scheduledFor])
}

enum Role {
  PATIENT
  CAREGIVER
}

enum PermissionLevel {
  READ
  WRITE
  ADMIN
}

enum PermissionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum IntakeKind {
  MED
  TRT
}

enum IntakeAction {
  TAKEN
  SNOOZE
  SKIPPED
}

enum NotificationType {
  MEDICATION_REMINDER
  APPOINTMENT_REMINDER
  TREATMENT_UPDATE
  EMERGENCY_ALERT
  SYSTEM_MESSAGE
  CAREGIVER_REQUEST
  PERMISSION_UPDATE
  GENERAL_INFO
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}
